pipeline {
    agent any

    parameters {
        string(name: 'REPO_URL', defaultValue: 'https://github.com/SanctuaryV/community-platform-plus-backend.git', description: 'Git repo URL')
        string(name: 'REPO_BRANCH', defaultValue: 'main', description: 'Branch to checkout')
        string(name: 'IMAGE_NAME_BACKEND', defaultValue: 'community-platform-plus-backend', description: 'Docker image name for backend')
        string(name: 'N8N_WEBHOOK_URL', defaultValue: 'https://35.247.160.122:5678/webhook/627982e1-ee55-4a89-a91a-901e8436b313', description: 'n8n Test Webhook URL')
        booleanParam(name: 'Run_Checkmarx', defaultValue: false, description: 'Run Checkmarx scan')
    }

    environment {
        APP_REPO_URL = "${params.REPO_URL}"
        APP_REPO_BRANCH = "${params.REPO_BRANCH}"
        IMAGE_NAME_BACKEND = "${params.IMAGE_NAME_BACKEND}"
        IMAGE_TAG = "${BUILD_NUMBER}"
    }

    stages {
        stage('Clone Repository') {
            steps {
                cleanWs()
                git branch: "${APP_REPO_BRANCH}",
                    url: "${APP_REPO_URL}"
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                    echo "Installing dependencies..."
                    npm install
                '''
            }
        }

        stage('SAST - Checkmarx') {
            when {
                expression { return params.Run_Checkmarx == true }
            }
            steps {
                script {
                    try {
                        echo "🔍 Running Checkmarx scan..."
                        
                        // Run Checkmarx scan with custom output path
                        checkmarxASTScanner additionalOptions: '--project-groups intern --scan-types "sast,sca" --report-format sarif,summaryConsole --output-name checkmarx --output-path reports',
                            baseAuthUrl: '',
                            branchName: "${APP_REPO_BRANCH}",
                            checkmarxInstallation: 'Checkmarx',
                            credentialsId: '',
                            projectName: "SanctuaryV/community-platform-plus-backend",
                            serverUrl: '',
                            tenantName: '',
                            useOwnAdditionalOptions: true
                        
                        echo "📋 Capturing Checkmarx scan summary..."
                        
                        // Capture scan summary from console output
                        def scanSummary = sh(script: '''
                            # Extract only the Scan Summary section from the logs
                            if [ -f "reports/checkmarx-summary.txt" ]; then
                                cat "reports/checkmarx-summary.txt"
                            else
                                echo "SUMMARY_NOT_FOUND"
                            fi
                        ''', returnStdout: true).trim()
                        
                        echo "📋 Capturing Checkmarx SARIF report..."
                        
                        // Capture SARIF file content
                        def sarifContent = sh(script: '''
                            if [ -f "reports/checkmarx.sarif" ]; then
                                echo "SARIF_FOUND"
                                cat "reports/checkmarx.sarif"
                            else
                                echo "SARIF_NOT_FOUND"
                            fi
                        ''', returnStdout: true).trim()
                        
                        // Store SARIF content in environment variable
                        def sarifNotFound = "SARIF_NOT_FOUND"
                        def sarifFound = "SARIF_FOUND"
                        
                        if (sarifContent != sarifNotFound && sarifContent.startsWith(sarifFound)) {
                            env.CHECKMARX_SARIF_REPORT = sarifContent.substring(sarifContent.indexOf('\n') + 1)
                            echo "✅ SARIF report captured (${env.CHECKMARX_SARIF_REPORT.length()} characters)"
                        } else {
                            echo "❌ SARIF report not found"
                            env.CHECKMARX_SARIF_REPORT = null
                        }
                        
                        // Store scan summary
                        if (scanSummary != "SUMMARY_NOT_FOUND") {
                            env.CHECKMARX_SCAN_SUMMARY = scanSummary
                            echo "✅ Scan Summary captured"
                            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                            echo "${scanSummary}"
                            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                        } else {
                            env.CHECKMARX_SCAN_SUMMARY = null
                        }
                        
                        // Archive reports for backup
                        archiveArtifacts artifacts: 'reports/**', fingerprint: true
                        
                    } catch (Exception e) {
                        echo "❌ Checkmarx scan failed: ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                        echo "Building backend Docker image..."
                        docker build --no-cache -t $IMAGE_NAME_BACKEND:$IMAGE_TAG .
                        docker images | grep $IMAGE_NAME_BACKEND
                    '''
                }
            }
        }

        stage('Send to n8n') {
            steps {
                script {
                    sh '''
                        mkdir -p reports
                        chmod 755 reports
                    '''
                    
                    def jobResult = currentBuild.result ?: 'SUCCESS'
                    def failedStage = jobResult != 'SUCCESS' ? (env.STAGE_NAME ?: 'Unknown Stage') : 'None'

                    def bangkokTimeZone = TimeZone.getTimeZone('Asia/Bangkok')
                    def dateFormat = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
                    dateFormat.setTimeZone(bangkokTimeZone)
                
                    // Capture Jenkins console logs and write to file
                    def jenkinsLogs = null
                    def scanSummary = null
                    try {
                        echo "📝 Capturing Jenkins console logs..."
                        def logContent = currentBuild.rawBuild.getLog(1000).join('\n')
                        
                        // Extract only the Scan Summary section from logs
                        def summaryPattern = /(?s)Scan Summary:.*?---------------------------------------------------------------------\s+\|\s+TOTAL.*?\|\s+---------------------------------------------------------------------/
                        def matcher = logContent =~ summaryPattern
                        
                        if (matcher.find()) {
                            scanSummary = matcher.group(0).trim()
                            def summaryFile = "reports/checkmarx-scan-summary-${env.BUILD_NUMBER}.txt"
                            writeFile file: summaryFile, text: scanSummary
                            echo "✅ Scan Summary extracted and saved to ${summaryFile}"
                            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                            echo "${scanSummary}"
                            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                            archiveArtifacts artifacts: summaryFile, fingerprint: true
                        } else {
                            echo "⚠️ Scan Summary not found in console logs"
                            scanSummary = "Scan Summary not found in console output"
                        }
                        
                        jenkinsLogs = [
                            scanSummary: scanSummary,
                            summaryFound: matcher.find()
                        ]
                    } catch (Exception e) {
                        echo "❌ Failed to capture Jenkins logs: ${e.getMessage()}"
                        jenkinsLogs = [
                            error: e.getMessage(),
                            scanSummary: null
                        ]
                    }
                
                    def checkmarxReport = null
                    if (params.Run_Checkmarx) {
                        echo "🔍 Processing Checkmarx SARIF report..."
                        
                        try {
                            if (env.CHECKMARX_SARIF_REPORT && env.CHECKMARX_SARIF_REPORT != 'null') {
                                checkmarxReport = [
                                    format: 'sarif',
                                    content: env.CHECKMARX_SARIF_REPORT,
                                    summary: env.CHECKMARX_SCAN_SUMMARY ?: 'Scan summary not available',
                                    scanSummary: env.CHECKMARX_SCAN_SUMMARY,
                                    filePath: 'reports/checkmarx.sarif',
                                    fileSize: env.CHECKMARX_SARIF_REPORT.length(),
                                    captureMethod: 'file_content'
                                ]
                                echo "✅ SARIF report captured (${env.CHECKMARX_SARIF_REPORT.length()} characters)"
                            } else {
                                checkmarxReport = [
                                    format: 'error',
                                    content: null,
                                    summary: env.CHECKMARX_SCAN_SUMMARY ?: 'SARIF report was not captured - file may not exist',
                                    scanSummary: env.CHECKMARX_SCAN_SUMMARY,
                                    captureMethod: 'failed'
                                ]
                                echo "❌ No SARIF report was captured"
                            }
                        } catch (Exception e) {
                            checkmarxReport = [
                                format: 'error',
                                content: null,
                                summary: 'Error processing SARIF report: ' + e.getMessage(),
                                scanSummary: env.CHECKMARX_SCAN_SUMMARY,
                                exception: e.getClass().getSimpleName()
                            ]
                            echo "❌ Error processing SARIF report: ${e.getMessage()}"
                        }
                    } else {
                        echo "⏭️ Checkmarx scan was skipped"
                    }

                    def payload = [
                        jobName: env.JOB_NAME,
                        buildNumber: env.BUILD_NUMBER,
                        jobResult: jobResult,
                        isSuccess: jobResult == 'SUCCESS',
                        triggeredBy: currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')?.get(0)?.userId ?: 'System',
                        startTime: dateFormat.format(new Date(currentBuild.startTimeInMillis)),
                        endTime: dateFormat.format(new Date()),
                        duration: currentBuild.durationString,
                        failedStage: failedStage,
                        timezone: 'Asia/Bangkok',
                        repository: [
                            url: params.REPO_URL,
                            branch: params.REPO_BRANCH
                        ],
                        buildUrl: env.BUILD_URL,
                        parameters: [
                            imageName: params.IMAGE_NAME_BACKEND,
                            runCheckmarx: params.Run_Checkmarx
                        ],
                        checkmarxReport: checkmarxReport,
                        jenkinsLogs: jenkinsLogs
                    ]

                    def buildNumber = env.BUILD_NUMBER
                    def expectedFileName = "Report-jenkins-checkmarx-test-build-${buildNumber}.html"
                    def outFile = "reports/${expectedFileName}"
                    
                    try {
                        echo "📤 Sending data to n8n and waiting for HTML report response..."
                        
                        def res = httpRequest(
                            httpMode: 'POST',
                            url: params.N8N_WEBHOOK_URL,
                            contentType: 'APPLICATION_JSON',
                            requestBody: groovy.json.JsonOutput.toJson(payload),
                            timeout: 300,
                            ignoreSslErrors: true,
                            validResponseCodes: '200:299',
                            outputFile: outFile
                        )
                        
                        echo "✅ Response received from n8n - Status: ${res.status}"
                        
                        def fileContent = readFile(outFile)
                        
                        if (fileContent.contains('<html') || fileContent.contains('<!DOCTYPE')) {
                            echo "✅ Valid HTML report received! Size: ${fileContent.length()} characters"
                            archiveArtifacts artifacts: outFile, fingerprint: true, onlyIfSuccessful: false
                            echo "📁 Report archived as Jenkins artifact: ${outFile}"
                            echo "🎉 HTML report successfully received and archived!"
                        } else {
                            echo "⚠️ Response received but doesn't contain valid HTML"
                            echo "📄 Response preview (first 500 chars):"
                            echo fileContent.take(500)
                        }
                        
                    } catch (Exception e) {
                        echo "❌ Failed to get HTML from n8n: ${e.getMessage()}"
                        if (e.getMessage().contains('SSL') || e.getMessage().contains('certificate')) {
                            echo "Note: SSL certificate issue with self-signed certificates"
                        } else if (e.getMessage().contains('timeout')) {
                            echo "Note: n8n took too long to generate the report (> 5 minutes)"
                        }
                    }
                }
            }
        }
    }
}
