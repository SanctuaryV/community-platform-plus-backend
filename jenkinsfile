
pipeline {
    agent any

    parameters {
        string(name: 'REPO_URL', defaultValue: 'https://github.com/SanctuaryV/community-platform-plus-backend.git', description: 'Git repo URL')
        string(name: 'REPO_BRANCH', defaultValue: 'main', description: 'Branch to checkout')
        string(name: 'IMAGE_NAME_BACKEND', defaultValue: 'community-platform-plus-backend', description: 'Docker image name for backend')

        booleanParam(name: 'Run_Checkmarx', defaultValue: false, description: 'Run Checkmarx scan')
    }

    environment {
        APP_REPO_URL    = "${params.REPO_URL}"
        APP_REPO_BRANCH = "${params.REPO_BRANCH}"
        IMAGE_NAME_BACKEND = "${params.IMAGE_NAME_BACKEND}"
        IMAGE_TAG = "${BUILD_NUMBER}" 
    }

    stages {
        stage('Clone Repository') {
            steps {
                cleanWs()
                git branch: "${APP_REPO_BRANCH}",
                    url: "${APP_REPO_URL}"
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                  echo "Installing depaendencies..."
                  npm install
                '''
            }
        }


        stage('SAST - Checkmarx') {
            when {
                expression { return params.Run_Checkmarx == true }
            }
            steps {
                checkmarxASTScanner additionalOptions: '--project-groups intern --scan-types "sast,sca"',
                    baseAuthUrl: '',
                    branchName: "${APP_REPO_BRANCH}",
                    checkmarxInstallation: 'Checkmarx',
                    credentialsId: '',
                    projectName: "SanctuaryV/community-platform-plus-frontend",
                    serverUrl: '',
                    tenantName: '',
                    useOwnAdditionalOptions: true
            }
        }

                stage('Build Docker Image') {
            steps {
             
                    sh '''
                        echo "Building backend Docker image..."
                        docker build --no-cache -t $IMAGE_NAME_BACKEND:$IMAGE_TAG .
                        docker images | grep $IMAGE_NAME_BACKEND
                    '''
                
            }
        }

          stage('Notify n8n') {
            steps {
                script {
                    // Customize your payload
                    def payload = [
                        event   : env.BRANCH_NAME == 'main' ? 'push_to_main' : 'pr',
                        repo    : env.JOB_NAME,
                        actor   : env.BUILD_USER ?: 'jenkins',
                        branch  : env.BRANCH_NAME,
                        build   : env.BUILD_NUMBER,
                        status  : currentBuild.currentResult,
                        url     : env.BUILD_URL
                    ]

                    // Send to your n8n webhook
                    sh """
                        curl -s -k -X POST 'https://35.247.160.122:5678/webhook-test/627982e1-ee55-4a89-a91a-901e8436b313' \
                          -H 'Content-Type: application/json' \
                          -d '${groovy.json.JsonOutput.toJson(payload)}'
                    """
                }
            }
        }
    }
}

