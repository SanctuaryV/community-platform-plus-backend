pipeline {
    agent any

    parameters {
        string(name: 'REPO_URL', defaultValue: 'https://github.com/SanctuaryV/community-platform-plus-backend.git', description: 'Git repo URL')
        string(name: 'REPO_BRANCH', defaultValue: 'main', description: 'Branch to checkout')
        string(name: 'IMAGE_NAME_BACKEND', defaultValue: 'community-platform-plus-backend', description: 'Docker image name for backend')
        string(name: 'N8N_WEBHOOK_URL', defaultValue: 'https://35.247.160.122:5678/webhook-test/627982e1-ee55-4a89-a91a-901e8436b313', description: 'n8n Test Webhook URL')
        booleanParam(name: 'Run_Checkmarx', defaultValue: false, description: 'Run Checkmarx scan')
    }

    environment {
        APP_REPO_URL = "${params.REPO_URL}"
        APP_REPO_BRANCH = "${params.REPO_BRANCH}"
        IMAGE_NAME_BACKEND = "${params.IMAGE_NAME_BACKEND}"
        IMAGE_TAG = "${BUILD_NUMBER}"
    }

    stages {
        stage('Clone Repository') {
            steps {
                cleanWs()
                git branch: "${APP_REPO_BRANCH}",
                    url: "${APP_REPO_URL}"
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                    echo "Installing dependencies..."
                    npm install
                '''
            }
        }

        stage('SAST - Checkmarx') {
            when {
                expression { return params.Run_Checkmarx == true }
            }
            steps {
                script {
                    try {
                        echo "üîç Running Checkmarx scan..."
                        
                        checkmarxASTScanner additionalOptions: '--project-groups intern --scan-types "sast,sca" --output-name checkmarx --output-path reports',
                            baseAuthUrl: '',
                            branchName: "${APP_REPO_BRANCH}",
                            checkmarxInstallation: 'Checkmarx',
                            credentialsId: '',
                            projectName: "SanctuaryV/community-platform-plus-frontend",
                            serverUrl: '',
                            tenantName: '',
                            useOwnAdditionalOptions: true
                        
                        echo "üìã Capturing Checkmarx reports..."
                        
                        // Debug file discovery
                        sh '''
                            echo "Current directory: $(pwd)"
                            echo "Directory contents:"
                            ls -la
                            echo "Searching for Checkmarx files:"
                            find . -name "*checkmarx*" -type f 2>/dev/null || echo "No checkmarx files found"
                        '''
                        
                        // Capture JSON report
                        def jsonContent = sh(script: '''
                            for path in "checkmarx-ast-results.json" "./checkmarx-ast-results.json"; do
                                if [ -f "$path" ]; then
                                    echo "FOUND_JSON:$path"
                                    cat "$path"
                                    exit 0
                                fi
                            done
                            
                            json_file=$(find . -name "checkmarx-ast-results.json" -type f 2>/dev/null | head -1)
                            if [ -n "$json_file" ] && [ -f "$json_file" ]; then
                                echo "FOUND_JSON:$json_file"
                                cat "$json_file"
                                exit 0
                            fi
                            
                            echo "JSON_NOT_FOUND"
                        ''', returnStdout: true).trim()
                        
                        // Capture HTML report
                        def htmlContent = sh(script: '''
                            for path in "checkmarx-ast-results.html" "./checkmarx-ast-results.html"; do
                                if [ -f "$path" ]; then
                                    echo "FOUND_HTML:$path"
                                    cat "$path"
                                    exit 0
                                fi
                            done
                            
                            html_file=$(find . -name "checkmarx-ast-results.html" -type f 2>/dev/null | head -1)
                            if [ -n "$html_file" ] && [ -f "$html_file" ]; then
                                echo "FOUND_HTML:$html_file"
                                cat "$html_file"
                                exit 0
                            fi
                            
                            echo "HTML_NOT_FOUND"
                        ''', returnStdout: true).trim()
                        
                        // Process reports
                        if (jsonContent != "JSON_NOT_FOUND") {
                            if (jsonContent.startsWith("FOUND_JSON:")) {
                                def parts = jsonContent.split('\n', 2)
                                def content = parts.length > 1 ? parts[1] : ""
                                env.CHECKMARX_JSON_REPORT = content
                                echo "‚úÖ JSON report captured (${content.length()} chars)"
                            } else {
                                env.CHECKMARX_JSON_REPORT = jsonContent
                                echo "‚úÖ JSON report captured (${jsonContent.length()} chars)"
                            }
                        } else {
                            echo "‚ùå JSON report not found"
                            env.CHECKMARX_JSON_REPORT = null
                        }
                        
                        if (htmlContent != "HTML_NOT_FOUND") {
                            if (htmlContent.startsWith("FOUND_HTML:")) {
                                def parts = htmlContent.split('\n', 2)
                                def content = parts.length > 1 ? parts[1] : ""
                                env.CHECKMARX_HTML_REPORT = content
                                echo "‚úÖ HTML report captured (${content.length()} chars)"
                            } else {
                                env.CHECKMARX_HTML_REPORT = htmlContent
                                echo "‚úÖ HTML report captured (${htmlContent.length()} chars)"
                            }
                        } else {
                            echo "‚ùå HTML report not found"
                            env.CHECKMARX_HTML_REPORT = null
                        }
                        
                    } catch (Exception e) {
                        echo "‚ùå Checkmarx scan failed: ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                        echo "Building backend Docker image..."
                        docker build --no-cache -t $IMAGE_NAME_BACKEND:$IMAGE_TAG .
                        docker images | grep $IMAGE_NAME_BACKEND
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                def jobResult = currentBuild.result ?: 'SUCCESS'
                def failedStage = 'None'
                
                if (jobResult != 'SUCCESS') {
                    failedStage = env.STAGE_NAME ?: 'Unknown Stage'
                }

                def bangkokTimeZone = TimeZone.getTimeZone('Asia/Bangkok')
                def dateFormat = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
                dateFormat.setTimeZone(bangkokTimeZone)
                
                def checkmarxReport = null
                if (params.Run_Checkmarx) {
                    echo "üîç Processing Checkmarx reports..."
                    
                    try {
                        if (env.CHECKMARX_JSON_REPORT && env.CHECKMARX_JSON_REPORT != 'null') {
                            checkmarxReport = [
                                format: 'json',
                                content: env.CHECKMARX_JSON_REPORT,
                                summary: 'Checkmarx AST scan results in JSON format',
                                fileSize: env.CHECKMARX_JSON_REPORT.length(),
                                captureMethod: 'environment_variable'
                            ]
                            echo "‚úÖ Using JSON report (${env.CHECKMARX_JSON_REPORT.length()} chars)"
                        } else if (env.CHECKMARX_HTML_REPORT && env.CHECKMARX_HTML_REPORT != 'null') {
                            checkmarxReport = [
                                format: 'html',
                                content: env.CHECKMARX_HTML_REPORT,
                                summary: 'Checkmarx AST scan results in HTML format',
                                fileSize: env.CHECKMARX_HTML_REPORT.length(),
                                captureMethod: 'environment_variable'
                            ]
                            echo "‚úÖ Using HTML report (${env.CHECKMARX_HTML_REPORT.length()} chars)"
                        } else {
                            checkmarxReport = [
                                format: 'error',
                                content: null,
                                summary: 'No Checkmarx reports were captured',
                                captureMethod: 'failed'
                            ]
                            echo "‚ùå No Checkmarx reports captured"
                        }
                    } catch (Exception e) {
                        checkmarxReport = [
                            format: 'error',
                            content: null,
                            summary: 'Error processing Checkmarx report: ' + e.getMessage(),
                            exception: e.getClass().getSimpleName()
                        ]
                        echo "‚ùå Error processing Checkmarx reports: ${e.getMessage()}"
                    }
                } else {
                    echo "‚è≠Ô∏è Checkmarx scan was skipped"
                }

                def payload = [
                    jobName: env.JOB_NAME,
                    buildNumber: env.BUILD_NUMBER,
                    jobResult: jobResult,
                    isSuccess: jobResult == 'SUCCESS',
                    triggeredBy: currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')?.get(0)?.userId ?: 'System',
                    startTime: dateFormat.format(new Date(currentBuild.startTimeInMillis)),
                    endTime: dateFormat.format(new Date()),
                    duration: currentBuild.durationString,
                    failedStage: failedStage,
                    timezone: 'Asia/Bangkok',
                    repository: [
                        url: params.REPO_URL,
                        branch: params.REPO_BRANCH
                    ],
                    buildUrl: env.BUILD_URL,
                    parameters: [
                        imageName: params.IMAGE_NAME_BACKEND,
                        runCheckmarx: params.Run_Checkmarx
                    ],
                    checkmarxReport: checkmarxReport
                ]

                try {
                    httpRequest(
                        httpMode: 'POST',
                        url: params.N8N_WEBHOOK_URL,
                        contentType: 'APPLICATION_JSON',
                        requestBody: groovy.json.JsonOutput.toJson(payload),
                        timeout: 30,
                        ignoreSslErrors: true,
                        acceptType: 'APPLICATION_JSON',
                        validResponseCodes: '200:299',
                        quiet: false
                    )
                    echo "‚úÖ Webhook sent to n8n successfully"
                } catch (Exception e) {
                    echo "‚ùå Failed to send webhook to n8n: ${e.getMessage()}"
                    if (e.getMessage().contains('SSL') || e.getMessage().contains('certificate')) {
                        echo "Note: SSL certificate issue with self-signed certificates"
                    }
                }
            }
        }
    }
}

