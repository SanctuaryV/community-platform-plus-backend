pipeline {
    agent any

    parameters {
        string(name: 'REPO_URL', defaultValue: 'https://github.com/SanctuaryV/community-platform-plus-backend.git', description: 'Git repo URL')
        string(name: 'REPO_BRANCH', defaultValue: 'main', description: 'Branch to checkout')
        string(name: 'IMAGE_NAME_BACKEND', defaultValue: 'community-platform-plus-backend', description: 'Docker image name for backend')
        string(name: 'N8N_WEBHOOK_URL', defaultValue: 'https://35.247.160.122:5678/webhook/627982e1-ee55-4a89-a91a-901e8436b313', description: 'n8n Test Webhook URL')
        booleanParam(name: 'Run_Checkmarx', defaultValue: false, description: 'Run Checkmarx scan')
    }

    environment {
        APP_REPO_URL = "${params.REPO_URL}"
        APP_REPO_BRANCH = "${params.REPO_BRANCH}"
        IMAGE_NAME_BACKEND = "${params.IMAGE_NAME_BACKEND}"
        IMAGE_TAG = "${BUILD_NUMBER}"
    }

    stages {
        stage('Clone Repository') {
            steps {
                cleanWs()
                git branch: "${APP_REPO_BRANCH}",
                    url: "${APP_REPO_URL}"
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                    echo "Installing dependencies..."
                    npm install
                '''
            }
        }

        stage('SAST - Checkmarx') {
            when {
                expression { return params.Run_Checkmarx == true }
            }
            steps {
                script {
                    try {
                        echo "üîç Running Checkmarx scan..."
                        
                        // Run Checkmarx scan with custom output path
                        checkmarxASTScanner additionalOptions: '--project-groups intern --scan-types "sast,sca" --report-format sarif --output-name checkmarx --output-path reports',
                            baseAuthUrl: '',
                            branchName: "${APP_REPO_BRANCH}",
                            checkmarxInstallation: 'Checkmarx',
                            credentialsId: '',
                            projectName: "SanctuaryV/community-platform-plus-backend",
                            serverUrl: '',
                            tenantName: '',
                            useOwnAdditionalOptions: true
                        
                        echo "üìã Capturing Checkmarx SARIF report..."
                        
                        // Capture SARIF file content
                        def sarifContent = sh(script: '''
                            if [ -f "reports/checkmarx.sarif" ]; then
                                echo "SARIF_FOUND"
                                cat "reports/checkmarx.sarif"
                            else
                                echo "SARIF_NOT_FOUND"
                            fi
                        ''', returnStdout: true).trim()
                        
                        // Store SARIF content in environment variable
                        def sarifNotFound = "SARIF_NOT_FOUND"
                        def sarifFound = "SARIF_FOUND"
                        
                        if (sarifContent != sarifNotFound && sarifContent.startsWith(sarifFound)) {
                            env.CHECKMARX_SARIF_REPORT = sarifContent.substring(sarifContent.indexOf('\n') + 1)
                            echo "‚úÖ SARIF report captured (${env.CHECKMARX_SARIF_REPORT.length()} characters)"
                        } else {
                            echo "‚ùå SARIF report not found"
                            env.CHECKMARX_SARIF_REPORT = null
                        }
                        
                        // Archive reports for backup
                        archiveArtifacts artifacts: 'reports/**', fingerprint: true
                        
                    } catch (Exception e) {
                        echo "‚ùå Checkmarx scan failed: ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                        echo "Building backend Docker image..."
                        docker build --no-cache -t $IMAGE_NAME_BACKEND:$IMAGE_TAG .
                        docker images | grep $IMAGE_NAME_BACKEND
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                def jobResult = currentBuild.result ?: 'SUCCESS'
                def failedStage = 'None'
                
                if (jobResult != 'SUCCESS') {
                    failedStage = env.STAGE_NAME ?: 'Unknown Stage'
                }

                def bangkokTimeZone = TimeZone.getTimeZone('Asia/Bangkok')
                def dateFormat = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
                dateFormat.setTimeZone(bangkokTimeZone)
                
                def checkmarxReport = null
                if (params.Run_Checkmarx) {
                    echo "üîç Processing Checkmarx SARIF report..."
                    
                    try {
                        if (env.CHECKMARX_SARIF_REPORT && env.CHECKMARX_SARIF_REPORT != 'null') {
                            // Send raw SARIF content without parsing to avoid readJSON dependency
                            checkmarxReport = [
                                format: 'sarif',
                                content: env.CHECKMARX_SARIF_REPORT,
                                summary: 'Checkmarx AST scan results in SARIF format',
                                filePath: 'reports/checkmarx.sarif',
                                fileSize: env.CHECKMARX_SARIF_REPORT.length(),
                                captureMethod: 'file_content'
                            ]
                            echo "‚úÖ SARIF report captured (${env.CHECKMARX_SARIF_REPORT.length()} characters)"
                        } else {
                            checkmarxReport = [
                                format: 'error',
                                content: null,
                                summary: 'SARIF report was not captured - file may not exist',
                                captureMethod: 'failed'
                            ]
                            echo "‚ùå No SARIF report was captured"
                        }
                    } catch (Exception e) {
                        checkmarxReport = [
                            format: 'error',
                            content: null,
                            summary: 'Error processing SARIF report: ' + e.getMessage(),
                            exception: e.getClass().getSimpleName()
                        ]
                        echo "‚ùå Error processing SARIF report: ${e.getMessage()}"
                    }
                } else {
                    echo "‚è≠Ô∏è Checkmarx scan was skipped"
                }

                def payload = [
                    jobName: env.JOB_NAME,
                    buildNumber: env.BUILD_NUMBER,
                    jobResult: jobResult,
                    isSuccess: jobResult == 'SUCCESS',
                    triggeredBy: currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')?.get(0)?.userId ?: 'System',
                    startTime: dateFormat.format(new Date(currentBuild.startTimeInMillis)),
                    endTime: dateFormat.format(new Date()),
                    duration: currentBuild.durationString,
                    failedStage: failedStage,
                    timezone: 'Asia/Bangkok',
                    repository: [
                        url: params.REPO_URL,
                        branch: params.REPO_BRANCH
                    ],
                    buildUrl: env.BUILD_URL,
                    parameters: [
                        imageName: params.IMAGE_NAME_BACKEND,
                        runCheckmarx: params.Run_Checkmarx
                    ],
                    checkmarxReport: checkmarxReport
                ]

                // Send to n8n webhook
                try {
                    httpRequest(
                        httpMode: 'POST',
                        url: params.N8N_WEBHOOK_URL,
                        contentType: 'APPLICATION_JSON',
                        requestBody: groovy.json.JsonOutput.toJson(payload),
                        timeout: 30,
                        ignoreSslErrors: true,
                        acceptType: 'APPLICATION_JSON',
                        validResponseCodes: '200:299',
                        quiet: false
                    )
                    echo "‚úÖ Webhook sent to n8n successfully"
                } catch (Exception e) {
                    echo "‚ùå Failed to send webhook to n8n: ${e.getMessage()}"
                    if (e.getMessage().contains('SSL') || e.getMessage().contains('certificate')) {
                        echo "Note: SSL certificate issue with self-signed certificates"
                    }
                }
                
                // Send custom metrics and logs to Datadog using plugin
                try {
                    def triggeredBy = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')?.get(0)?.userId ?: 'System'
                    def buildDurationMs = currentBuild.duration ?: 0
                    def buildDurationSeconds = buildDurationMs / 1000.0
                    
                    // Define common tags for all metrics
                    def commonTags = [
                        "job_name:${env.JOB_NAME}",
                        "branch:${params.REPO_BRANCH}",
                        "result:${jobResult.toLowerCase()}",
                        "user:${triggeredBy}",
                        "env:production",
                        "service:community-platform-backend"
                    ]
                    
                    datadog(
                        collectLogs: true,
                        tags: commonTags
                    ) {
                        // Send custom metrics
                        echo "üìä Sending Datadog metrics..."
                        
                        // 1. jenkins.job.duration - Build duration in seconds
                        sh """
                            echo "jenkins.job.duration:${buildDurationSeconds}|g|#${commonTags.join(',')}" | nc -u -w1 localhost 8125 || echo "Failed to send duration metric"
                        """
                        
                        // 2. jenkins.job.status - Build status (1 for success, 0 for failure)
                        def statusValue = jobResult == 'SUCCESS' ? 1 : 0
                        sh """
                            echo "jenkins.job.status:${statusValue}|g|#${commonTags.join(',')}" | nc -u -w1 localhost 8125 || echo "Failed to send status metric"
                        """
                        
                        // 3. jenkins.job.completed - Increment counter for completed jobs
                        sh """
                            echo "jenkins.job.completed:1|c|#${commonTags.join(',')}" | nc -u -w1 localhost 8125 || echo "Failed to send completion metric"
                        """
                        
                        // 4. Optional: jenkins.executor.count - Number of available executors
                        try {
                            def executorCount = Jenkins.instance.computers.sum { it.numExecutors }
                            sh """
                                echo "jenkins.executor.count:${executorCount}|g|#${commonTags.join(',')}" | nc -u -w1 localhost 8125 || echo "Failed to send executor count metric"
                            """
                        } catch (Exception ex) {
                            echo "‚ö†Ô∏è Could not get executor count: ${ex.getMessage()}"
                        }
                        
                        // 5. Optional: jenkins.queue.size - Number of jobs in queue
                        try {
                            def queueSize = Jenkins.instance.queue.items.length
                            sh """
                                echo "jenkins.queue.size:${queueSize}|g|#${commonTags.join(',')}" | nc -u -w1 localhost 8125 || echo "Failed to send queue size metric"
                            """
                        } catch (Exception ex) {
                            echo "‚ö†Ô∏è Could not get queue size: ${ex.getMessage()}"
                        }
                        
                        // Send structured logs
                        echo "üìä Build completed with status: ${jobResult}"
                        echo "üèóÔ∏è Job: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
                        echo "üë§ Triggered by: ${triggeredBy}"
                        echo "‚è±Ô∏è Duration: ${buildDurationSeconds}s (${currentBuild.durationString})"
                        echo "üîó Build URL: ${env.BUILD_URL}"
                        echo "üåø Branch: ${params.REPO_BRANCH}"
                        
                        if (params.Run_Checkmarx && checkmarxReport) {
                            echo "üîí Security Scan Results:"
                            echo "   üìä Report size: ${checkmarxReport.fileSize ?: 0} characters"
                            echo "   üìù Format: ${checkmarxReport.format}"
                            echo "   üìç File path: ${checkmarxReport.filePath}"
                            
                            // Send Checkmarx metrics
                            def checkmarxTags = commonTags + ["scan_type:checkmarx", "report_format:${checkmarxReport.format}"]
                            sh """
                                echo "jenkins.checkmarx.report_size:${checkmarxReport.fileSize ?: 0}|g|#${checkmarxTags.join(',')}" | nc -u -w1 localhost 8125 || echo "Failed to send checkmarx metric"
                            """
                        }
                    }
                    echo "‚úÖ Metrics and logs sent to Datadog successfully"
                } catch (Exception e) {
                    echo "‚ùå Failed to send metrics to Datadog: ${e.getMessage()}"
                }
            }
        }
    }
}

